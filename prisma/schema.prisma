// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  username     String
  firstName    String
  lastName     String
  password     String
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  lastLogin    DateTime?
  accessToken  String?
  refreshToken String?
  role         Role      @default(CUSTOMER)
  isActive     Boolean   @default(true)
  otp          String?
  otpExpiry    String?

  userAddress UserAddress[]
  cart        Cart?
  order       Order[]
}

model UserAddress {
  id                Int         @id @default(autoincrement())
  userId            Int
  addressLine1      String
  addressLine2      String?
  postalCode        Int
  city              String
  state             String
  country           String
  addressType       AddressType @default(HOME)
  isShippingAddress Boolean     @default(false)
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order             Order[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  isActive Boolean   @default(true)
  product  Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  productName String    @unique
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  isDeletedAt DateTime?
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sku         Sku[]
}

model Sku {
  id           Int          @id @default(autoincrement())
  productId    Int
  description  String
  attributes   Json
  skuCode      String       @unique
  productPrice Float
  discount     Float?
  stock        Int
  image        String
  isActive     Boolean      @default(true)
  isDeleted    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItem     CartItems[]
  orderItem    OrderItems[]
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItem  CartItems[]
}

model CartItems {
  id               Int   @id @default(autoincrement())
  cartId           Int
  productVariantId Int
  quantity         Int
  price            Float
  cart             Cart  @relation(fields: [cartId], references: [id], onDelete: Cascade)
  sku              Sku   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
}

model Order {
  id                Int          @id @default(autoincrement())
  userId            Int
  shippingAddressId Int
  couponId          Int? //define relation 
  orderDate         DateTime     @default(now())
  totalAmount       Float
  discountAmount    Float?
  finalAmount       Float?
  status            Status       @default(PENDING)
  user              User         @relation(fields: [userId], references: [id])
  address           UserAddress  @relation(fields: [shippingAddressId], references: [id])
  coupon            Coupon?      @relation(fields: [couponId], references: [id])
  orderItems        OrderItems[]
}

model OrderItems {
  id               Int   @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int
  price            Float
  order            Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sku              Sku   @relation(fields: [productVariantId], references: [id])
}

model Coupon {
  id            Int          @id @default(autoincrement())
  code          String
  description   String?
  discountType  DiscountType
  discountValue Float
  minOrderValue Float?
  maxDiscount   Float?
  validFrom     DateTime     @default(now())
  validTo       DateTime
  isActive      Boolean      @default(true)
  order         Order[]
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Status {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum AddressType {
  HOME
  WORK
  OTHER
}
